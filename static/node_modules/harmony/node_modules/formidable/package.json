{
  "name": "formidable",
  "version": "1.0.2",
  "dependencies": {},
  "devDependencies": {
    "gently": ">=0.7.0"
  },
  "directories": {
    "lib": "./lib"
  },
  "main": "./lib/index",
  "engines": {
    "node": "*"
  },
  "readme": "# Formidable\n\n## Purpose\n\nA node.js module for parsing form data, especially file uploads.\n\n## Current status\n\nThis module was developed for [Transloadit](http://transloadit.com/), a service focused on uploading\nand encoding images and videos. It has been battle-tested against hundreds of GB of file uploads from\na big variety of clients and is considered production-ready.\n\n## Features\n\n* Fast (~500mb/sec), non-buffering multipart parser\n* Automatically writing file uploads to disk\n* Low memory footprint\n* Graceful error handling\n* Very high test coverage\n\n## Changelog\n\n### v1.0.2\n\n* Exclude node\\_modules folder from git\n* Implement new `'aborted'` event\n* Fix files in example folder to work with recent node versions\n* Make gently a devDependency\n\n[See Commits](https://github.com/felixge/node-formidable/compare/v1.0.1...v1.0.2)\n\n### v1.0.1\n\n* Fix package.json to refer to proper main directory. (#68, Dean Landolt)\n\n[See Commits](https://github.com/felixge/node-formidable/compare/v1.0.0...v1.0.1)\n\n### v1.0.0\n\n* Add support for multipart boundaries that are quoted strings. (Jeff Craig)\n\nThis marks the begin of the development on version 2.0 which will include\nseveral architecural improvements.\n\n[See Commits](https://github.com/felixge/node-formidable/compare/v0.9.11...v1.0.0)\n\n### v0.9.11\n\n* Emit `'progress'` event when receiving data, regardless of parsing it. (Tim Kosch√ºtzki)\n* Use [W3C FileAPI Draft](http://dev.w3.org/2006/webapi/FileAPI/) properties for File class\n\n**Important:** The old property names of the File class will be removed in a\nfuture release.\n\n[See Commits](https://github.com/felixge/node-formidable/compare/v0.9.10...v0.9.11)\n\n### Older releases\n\nThese releases were done before starting to maintain the above Changelog:\n\n* [v0.9.10](https://github.com/felixge/node-formidable/compare/v0.9.9...v0.9.10)\n* [v0.9.9](https://github.com/felixge/node-formidable/compare/v0.9.8...v0.9.9)\n* [v0.9.8](https://github.com/felixge/node-formidable/compare/v0.9.7...v0.9.8)\n* [v0.9.7](https://github.com/felixge/node-formidable/compare/v0.9.6...v0.9.7)\n* [v0.9.6](https://github.com/felixge/node-formidable/compare/v0.9.5...v0.9.6)\n* [v0.9.5](https://github.com/felixge/node-formidable/compare/v0.9.4...v0.9.5)\n* [v0.9.4](https://github.com/felixge/node-formidable/compare/v0.9.3...v0.9.4)\n* [v0.9.3](https://github.com/felixge/node-formidable/compare/v0.9.2...v0.9.3)\n* [v0.9.2](https://github.com/felixge/node-formidable/compare/v0.9.1...v0.9.2)\n* [v0.9.1](https://github.com/felixge/node-formidable/compare/v0.9.0...v0.9.1)\n* [v0.9.0](https://github.com/felixge/node-formidable/compare/v0.8.0...v0.9.0)\n* [v0.9.0](https://github.com/felixge/node-formidable/compare/v0.8.0...v0.9.0)\n* [v0.9.0](https://github.com/felixge/node-formidable/compare/v0.8.0...v0.9.0)\n* [v0.9.0](https://github.com/felixge/node-formidable/compare/v0.8.0...v0.9.0)\n* [v0.9.0](https://github.com/felixge/node-formidable/compare/v0.8.0...v0.9.0)\n* [v0.9.0](https://github.com/felixge/node-formidable/compare/v0.8.0...v0.9.0)\n* [v0.9.0](https://github.com/felixge/node-formidable/compare/v0.8.0...v0.9.0)\n* [v0.9.0](https://github.com/felixge/node-formidable/compare/v0.8.0...v0.9.0)\n* [v0.1.0](https://github.com/felixge/node-formidable/commits/v0.1.0)\n\n## Installation\n\nVia [npm](http://github.com/isaacs/npm):\n\n    npm install formidable@latest\n\nManually:\n\n    git clone git://github.com/felixge/node-formidable.git formidable\n    vim my.js\n    # var formidable = require('./formidable');\n\nNote: Formidable requires [gently](http://github.com/felixge/node-gently) to run the unit tests, but you won't need it for just using the library.\n\n## Example\n\nParse an incoming file upload.\n\n    var formidable = require('formidable'),\n        http = require('http'),\n\n        sys = require('sys');\n\n    http.createServer(function(req, res) {\n      if (req.url == '/upload' && req.method.toLowerCase() == 'post') {\n        // parse a file upload\n        var form = new formidable.IncomingForm();\n        form.parse(req, function(err, fields, files) {\n          res.writeHead(200, {'content-type': 'text/plain'});\n          res.write('received upload:\\n\\n');\n          res.end(sys.inspect({fields: fields, files: files}));\n        });\n        return;\n      }\n\n      // show a file upload form\n      res.writeHead(200, {'content-type': 'text/html'});\n      res.end(\n        '<form action=\"/upload\" enctype=\"multipart/form-data\" method=\"post\">'+\n        '<input type=\"text\" name=\"title\"><br>'+\n        '<input type=\"file\" name=\"upload\" multiple=\"multiple\"><br>'+\n        '<input type=\"submit\" value=\"Upload\">'+\n        '</form>'\n      );\n    });\n\n## API\n\n### formdiable.IncomingForm\n\n#### new formdiable.IncomingForm()\n\nCreates a new incoming form.\n\n#### incomingForm.encoding = 'utf-8'\n\nThe encoding to use for incoming form fields.\n\n#### incomingForm.uploadDir = '/tmp'\n\nThe directory for placing file uploads in. You can later on move them using `fs.rename()`.\n\n#### incomingForm.keepExtensions = false\n\nIf you want the files written to `incomingForm.uploadDir` to include the extensions of the original files, set this property to `true`.\n\n#### incomingForm.type\n\nEither 'multipart' or 'urlencoded' depending on the incoming request.\n\n#### incomingForm.maxFieldsSize = 2 * 1024 * 1024\n\nLimits the amount of memory a field (not file) can allocate in bytes.\nI this value is exceeded, an `'error'` event is emitted. The default\nsize is 2MB.\n\n#### incomingForm.bytesReceived\n\nThe amount of bytes received for this form so far.\n\n#### incomingForm.bytesExpected\n\nThe expected number of bytes in this form.\n\n#### incomingForm.parse(request, [cb])\n\nParses an incoming node.js `request` containing form data. If `cb` is provided, all fields an files are collected and passed to the callback:\n\n    incomingForm.parse(req, function(err, fields, files) {\n      // ...\n    });\n\n#### incomingForm.onPart(part)\n\nYou may overwrite this method if you are interested in directly accessing the multipart stream. Doing so will disable any `'field'` / `'file'` events  processing which would occur otherwise, making you fully responsible for handling the processing.\n\n    incomingForm.onPart = function(part) {\n      part.addListener('data', function() {\n        // ...\n      });\n    }\n\nIf you want to use formidable to only handle certain parts for you, you can do so:\n\n    incomingForm.onPart = function(part) {\n      if (!part.filename) {\n        // let formidable handle all non-file parts\n        incomingForm.handlePart(part);\n      }\n    }\n\nCheck the code in this method for further inspiration.\n\n#### Event: 'progress' (bytesReceived, bytesExpected)\n\nEmitted after each incoming chunk of data that has been parsed. Can be used to roll your own progress bar.\n\n#### Event: 'field' (name, value)\n\nEmitted whenever a field / value pair has been received.\n\n#### Event: 'fileBegin' (name, file)\n\nEmitted whenever a new file is detected in the upload stream. Use this even if\nyou want to stream the file to somewhere else while buffering the upload on\nthe file system.\n\n#### Event: 'file' (name, file)\n\nEmitted whenever a field / file pair has been received. `file` is an instance of `File`.\n\n#### Event: 'error' (err)\n\nEmitted when there is an error processing the incoming form. A request that experiences an error is automatically paused, you will have to manually call `request.resume()` if you want the request to continue firing `'data'` events.\n\n#### Event: 'aborted'\n\nEmitted when the request was aborted by the user. Right now this can be due to a 'timeout' or 'close' event on the socket. In the future there will be a seperate 'timeout' event (needs a change in the node core).\n\n#### Event: 'end' ()\n\nEmitted when the entire request has been received, and all contained files have finished flushing to disk. This is a great place for you to send your response.\n\n### formdiable.File\n\n#### file.size = 0\n\nThe size of the uploade file in bytes. If the file is still being uploaded (see `'fileBegin'` event), this property says how many bytes of the file have been written to disk yet.\n\n#### file.path = null\n\nThe path this file is being written to. You can modify this in the `'fileBegin'` event in\ncase you are unhappy with the way formidable generates a temporary path for your files.\n\n#### file.name = null\n\nThe name this file had according to the uploading client.\n\n#### file.type = null\n\nThe mime type of this file, according to the uploading client.\n\n#### file.lastModifiedDate = null\n\nA date object (or `null`) containing the time this file was last written to. Mostly\nhere for compatiblity with the [W3C File API Draft](http://dev.w3.org/2006/webapi/FileAPI/).\n\n## License\n\nFormidable is licensed under the MIT license.\n\n## Ports\n\n* [multipart-parser](http://github.com/FooBarWidget/multipart-parser): a C++ parser based on formidable\n\n## Credits\n\n* [Ryan Dahl](http://twitter.com/ryah) for his work on [http-parser](http://github.com/ry/http-parser) which heavily inspired multipart_parser.js\n",
  "readmeFilename": "Readme.md",
  "description": "## Purpose",
  "_id": "formidable@1.0.2",
  "_from": "formidable@1.0.2"
}
